<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM7Z0AAXAAAAYFBDB0s2
        KR49JxksQy0fKFJAMQ/U9uQAeHVmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEo1
        KABNOCsOQi0gWEErHmlKNikhPSQVAGBTRgAAAAAAAAAAAAAAAAAAAAAAAAAAAL+/twBGMyYAVkU4DEEt
        IFY8JhiuQSka3UguHutFLBzoPSYYxEQuIV5ZST0GUkE0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABfUEUAbGBWBj8pG4xONiT7WD8r/0EpGr9QPjAZTTosAAAAAAAAAAAAAAAAAAAAAABqXVEARCweAE44
        KiU+KBqpSzMi94BlS/+0lXX/yquJ/8GhgP+JbVL/Ry4e9EAqHHRwaVwEXE5AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAn5mTAEArHQBHMyc/RS0d7rmkjv/Vx7b/UTko+UQvIUxAKRoAAAAAAAAAAAAAAAAAAAAAAEMu
        IABLNyohPicYwGVMNv/EpoT/8di5/+nYxP/azLz/5dXB//DUsv+miGr/Ri4d70YyJEo3HxAArq+mAAAA
        AAAAAAAAAAAAAAAAAABTPjQAWUY8CzwlGKp1XEf/9u3i/9jU0P9NNin0RjEjQkMtHgAAAAAAAAAAAAAA
        AACTiX4AIgMAAEApHHxhRzP/28Cf/+rbx/+hlYv/YU5C/U03K/pdSj//oJCB/7iafv9mTDj/PicZulVD
        Nh1lVUkKfXJmBO769ADM0MgAVUQ5AGlcUwZBKh54TjUj+Mu5pP///vz/k4Z//z0lF8ZTQTQSUT8yAAAA
        AAAAAAAAAAAAAI2BdwAiAgAAPycagWNKOP+9r6D/dmVb/z0nGd5AKhuBQCgaxUEoGP9PNiT/SC4e/z8m
        F/87IhL6PCQU1TwlFsE8IxWsOyMUlj0mF4JELSB1PCYZoEcuHvSrlH3//vny/9TPzP9QOi36QSsdZSgL
        AAB7cGUAAAAAAAAAAAAAAAAAAAAAAEYwJABNOC0qQCocvUErHec9Jxm0RzQmMU87LixBKBnnblM9/4Vp
        UP9ONCP/e2VT/6eWhv+biHb/iXZi/3tkUf9uVkL/Ykk2/1pCLv9tVT//uaSN//v17P/q6Of/bl1S/z0m
        GMBYSTwRVEM3AAAAAAAAAAAAAAAAAD0lFmQ9JhZkPiYXZUYwITpRQDERPyscJFE/Mw1AKBsAQCoeQlE3
        Jvacf2P/Wj8t/25VQv/w6d7//////////P/9/fj/+vjy//by6v/v6uD/6+TX//Tt4f/+/fj/39vY/3Nj
        Wf9ELiD/QSobz048LhtLOSsAAAAAAAAAAAAAAAAAQCkauEApGbhBKRm7RzEib7/LyAFhT0UKZFVKBT4m
        GABDLCBTXEIw/L+ggP9bPy3/mINv///++v/9/vz//f78//3+/P/9/v3//f/9//7//v/+//7//////+rp
        5v9oVkv/bFtR/7u0rv9UPzH5QiwbTUApGQAAAAAAAAAAAAAAAABrX1AGa15QBmxeTwZcSz8JQSsebj0m
        GMY/JxinSzcpJ0AoG1haQC39p4ls/1I3Jf+tm4r////+//3+/P/9/vz//f78//3+/P/9/vz//f78//3+
        /P/9/v3/9vb0/87JxP/u7ev/8vDv/2FNQf09JheQRzImT0w4Kh74//8AaWBWAF9NPxVgTkAVj4h7A0Is
        HkBILx/wkHhg/2tWRf8/KRmtQiwecVM5KP90WEP/Ry0d/8Cwov///////f78//7//f/9/vz//f78//7/
        /f/+//3//f78//3+/P/+//3////////////s6+j/XEc6/000Iv1QOCb8PicY0UUxI0MPAAAAQioby0Iq
        G8xLNyhWOyMWWV1DL/7t387/0c3I/0s1JvE6JBbDZ0w5/o5wWP9JLx//0MW4///////6+/n/7u3q//r7
        +f/9/vz/8O7s/+vq5//7+/n//f38/+7t6//39/b//////+Xi3/9ZQjT/tJp+/9e9nf98YUr/PycYzk49
        LyQ/JxlDPykaQ0o3KhhGLyNASjEg88y6p//9/Pv/npOL/0UuIP5EKRn/TTQj/3RcSf/p4dj//////7Or
        pP9aRzr/samj//v7+f+ajYX/fm5k/+nn5P/OycX/X0w//5aJgf/8/fv/29jU/1A5LP+ll4v/+PPr/+DU
        xf9YQDH9QSsdfwAAAAAAAAAAUj80AFRCNw4+JRi4eWBM//Ho3P/6+vn/z8jB/7epm//NwbL/8+7l//3+
        /P/8/fv/f3Bn/y8WB/9/b2b//P37/+7t6v/p6OX//f78/6Sak/8yGQn/YEw///T08v/Szcj/Ri4h+0Ir
        HPitmoj//v35/4p6cf8+JRbKAAAAAAAAAAChnJoAOB8QAEcyJT9BKBniiXFc/+Tazf/9/Pr//v7+/+/v
        7f/d19D/+vjz/////v/Dvbj/c2Na/8K8t/////7//v/9//7//v////7/2dbS/3loX/+qopv////+/8a/
        uv9GLyDiQSodrW5UQP/38Of/sKeh/0AoGfGIfXAHiH1vB4h9cAeIfnAHlZGDA0UvIkw/JxnTWT8u/Xll
        V/94aF7/XEg8/3ReS//18er//v/9//3+/P/5+ff//f78//3+/P/9/vz//f78//3+/P/+/v3/+fr4//z9
        /P//////urGs/0IrG9FFLiFwVz0r++fczv+xqKL/QCgZ8kQtHrhELR64RC0euEQtHrpHMCGMXk5BCkw3
        Kh5DLR5vPSQV62hOOP9WOyj/dl9N//n38f/9//3//f78//3+/P/9/vz//f78//3+/P/9/vz//f78//3+
        /P/9/vz//f78//////+to5z/QCgYx046LTtDKxzhdF5N/1pGOf4/KRyqOyMUZDsjFGQ7IxRkOiMUZUEq
        G05dTT8GUDsvAEs1KRlFLB3Zp4ls/2pPOv+Db17//fz5//3+/P/9/vz//f78//3+/P/9/vz//f78//3+
        /P/9/vz//f78//3+/P/9/vz//////5+Ti/8+Jhe5dWhbCkcxJUs9JRedPykaf1A9MR4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABJMyUASjMmJ0QqG+eDZk7/Vzwq/5SDdP////3//f78//3+/P/9/vz//f78//3+
        /P/9/vz//f78//3+/P/9/vz//f78//3+/P////7/j4J5/zwkFaWvs6ICdWpbANTa0wHa39gA2t/YAFA7
        LBRGLyA7RC4ePUUuHj1ELh49Ri8fPE89LRNJMyU6TTQj84FmTv9HLhz/p5uQ///////+//7////+//3+
        /P/9/v3///////7//f/9/vz////+/////v/9/vz//v/9//7+/f9/cGb/PigZkgAAAACwqKAAAAAAAAAA
        AAAAAAAASDIkSkIqG8hBKRrNQSkazUEpGs1CKhvNSzYnUEAqHE5aQC37p4lt/1A2J/+7s63//////+Ti
        3//a19T/+/z6//X18//RzMj/6ujm//3+/P/c2dX/1tLO//z8+//r6uf/v7mz/2FOQ/8/KRtzKxECAPDw
        6wAAAAAAAAAAAAAAAABgUEQHVkM3GFRBNRlTQTUZVEE1GVVCNhmJf3gEQisdcFA2JP9uUj3/TDQm/9HM
        yP/w7+3/allN/085K//Iwr3/sqqk/0YwIv95aV7/3drX/2NQQ/9POiv/zMfC/5+Si/9FLiD/PyYY+kUv
        Ik4/JxkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgnVqAAsAAAA9JhiPdFtG/4Zt
        Vv9TPzL/5uPh//j39v+2p5f/aVNB/4x+df/X0cr/oo98/1U/Mv/Gv7r/uaqY/2lTQ/+Qg3r/zsa9/6qX
        hP9LMybzSDIjO0YwIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIfXIAHQAAAEEq
        HHxdSDr/dmNW/1E7Lv+Yi4P/jYB3/7CejP+EcmT/UDsv/4JxZP+5qJf/UTsu/19LP/+pl4X/e2ha/0gx
        JP92YlL/t6aX/043KvFKNCU4STMkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGMSIATjwuGUAqG48/KBjFQCkawT0lF647IhPfXkc4/086LfY9JhjIRi0e92BLPf9AKhvYPSUW4F5H
        Of9JMybsPSYXvU42J/haRTj/QSsdsVhGOg9UQjUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABrW00AeGpcA11LPQxkVUgLiIF7A0cyJTZAKRqJQSweY1FAMxhBKhxiOiQVfEc0
        JixIMiQ3PygafkQuIkxSQDQTQCkbWz0nGWdPPTEdLBUGALy5twAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////g//D/gD/gfwAf4H4AH8B+AAOAfgAAAP4AAADwEA
        AA8BAAAPAAAAAwAAAAEAAAAAAAAAAOAAAADwAAAAAAAAAAAAAAACAAAA/gAACwAAAB8AAAAfAAAAH/4A
        AB/+AAAf/gAAH/8AAD////////////////8=
</value>
  </data>
</root>